// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../utils.js");

function adjacent() {
  return /* :: */[
          /* tuple */[
            -1,
            0
          ],
          /* :: */[
            /* tuple */[
              1,
              0
            ],
            /* :: */[
              /* tuple */[
                0,
                -1
              ],
              /* :: */[
                /* tuple */[
                  0,
                  1
                ],
                /* :: */[
                  /* tuple */[
                    -1,
                    1
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      -1
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ];
}

function to_direction(param) {
  var dy = param[1];
  var switcher = param[0] + 1 | 0;
  if (switcher > 2 || switcher < 0) {
    return /* None */0;
  } else {
    switch (switcher) {
      case 0 : 
          if (dy !== 0) {
            if (dy !== 1) {
              return /* None */0;
            } else {
              return /* Some */[/* Zy */5];
            }
          } else {
            return /* Some */[/* Xminus */0];
          }
      case 1 : 
          var switcher$1 = dy + 1 | 0;
          if (switcher$1 > 2 || switcher$1 < 0) {
            return /* None */0;
          } else {
            switch (switcher$1) {
              case 0 : 
                  return /* Some */[/* Yminus */2];
              case 1 : 
                  return /* None */0;
              case 2 : 
                  return /* Some */[/* Yplus */3];
              
            }
          }
          break;
      case 2 : 
          if (dy !== -1) {
            if (dy !== 0) {
              return /* None */0;
            } else {
              return /* Some */[/* Xplus */1];
            }
          } else {
            return /* Some */[/* Zx */4];
          }
      
    }
  }
}

var sq3 = Math.sqrt(3.0);

function wall_in_direction(direction) {
  var pts;
  switch (direction) {
    case 0 : 
        pts = /* tuple */[
          /* tuple */[
            0.0,
            Curry._2(Utils.Float[/* / */2], -1.0, sq3)
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], -1.0, 2.0),
            Curry._2(Utils.Float[/* + */0], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], -1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    case 1 : 
        pts = /* tuple */[
          /* tuple */[
            0.0,
            Curry._2(Utils.Float[/* / */2], 1.0, sq3)
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], 1.0, 2.0),
            Curry._2(Utils.Float[/* - */1], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], 1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    case 2 : 
        pts = /* tuple */[
          /* tuple */[
            0.0,
            Curry._2(Utils.Float[/* / */2], -1.0, sq3)
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], 1.0, 2.0),
            Curry._2(Utils.Float[/* + */0], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], -1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    case 3 : 
        pts = /* tuple */[
          /* tuple */[
            0.0,
            Curry._2(Utils.Float[/* / */2], 1.0, sq3)
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], -1.0, 2.0),
            Curry._2(Utils.Float[/* - */1], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], 1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    case 4 : 
        pts = /* tuple */[
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], 1.0, 2.0),
            Curry._2(Utils.Float[/* - */1], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], 1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], 1.0, 2.0),
            Curry._2(Utils.Float[/* + */0], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], -1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    case 5 : 
        pts = /* tuple */[
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], -1.0, 2.0),
            Curry._2(Utils.Float[/* - */1], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], 1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ],
          /* tuple */[
            Curry._2(Utils.Float[/* / */2], -1.0, 2.0),
            Curry._2(Utils.Float[/* + */0], Curry._2(Utils.Float[/* / */2], Curry._2(Utils.Float[/* * */3], -1.0, sq3), 2.0), Curry._2(Utils.Float[/* / */2], 1.0, sq3))
          ]
        ];
        break;
    
  }
  return /* Line */[pts];
}

exports.adjacent          = adjacent;
exports.to_direction      = to_direction;
exports.sq3               = sq3;
exports.wall_in_direction = wall_in_direction;
/* sq3 Not a pure module */
