// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var DrawShared = require("../drawShared.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function all_walls(full) {
  return $$Array.fold_left(function (param, item) {
                var i = param[0];
                return /* tuple */[
                        i + 1 | 0,
                        Pervasives.$at(List.map(function (d) {
                                  return /* tuple */[
                                          i,
                                          d
                                        ];
                                }, item), param[1])
                      ];
              }, /* tuple */[
                0,
                /* [] */0
              ], full)[1];
}

function range(i, n) {
  var _n = n - 1 | 0;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var n$1 = _n;
    if (n$1 < i) {
      return acc;
    } else {
      _acc = /* :: */[
        n$1,
        acc
      ];
      _n = n$1 - 1 | 0;
      continue ;
      
    }
  };
}

function Draw(Board) {
  return function (Generator) {
    return function (DrawConfig) {
      var Draw = DrawShared.Draw(Board)(DrawConfig);
      var walls = function (ctx, bsize, csize) {
        var full = Curry._1(Board[/* adjacency_list */1], bsize);
        return Curry._4(Draw[/* draw_walls */1], ctx, bsize, csize, all_walls(full));
      };
      var dots = function (ctx, bsize, csize) {
        Curry._1(Board[/* adjacency_list */1], bsize);
        var vertices = Curry._1(Board[/* Shape */0][/* vertex_count */3], bsize);
        return Curry._5(Draw[/* vertex_dots */2], ctx, bsize, csize, range(0, vertices), 10.0);
      };
      var paths = function (ctx, bsize, csize) {
        var full = Curry._1(Board[/* adjacency_list */1], bsize);
        var traveled = Curry._2(Generator[/* spanning_tree */4], Curry._1(Board[/* Shape */0][/* vertex_count */3], bsize), full);
        ctx.strokeStyle = "rgba(100, 100, 100, 0.1)";
        return Curry._4(Draw[/* paths */4], ctx, bsize, csize, traveled);
      };
      var connections = function (ctx, bsize, csize) {
        var full = Curry._1(Board[/* adjacency_list */1], bsize);
        console.log($$Array.map($$Array.of_list, full));
        ctx.strokeStyle = "rgba(100, 100, 100, 0.1)";
        return Curry._4(Draw[/* connections */5], ctx, bsize, csize, all_walls(full));
      };
      return /* module */[
              /* Draw */Draw,
              /* walls */walls,
              /* dots */dots,
              /* paths */paths,
              /* connections */connections
            ];
    };
  };
}

exports.all_walls = all_walls;
exports.range     = range;
exports.Draw      = Draw;
/* DrawShared Not a pure module */
